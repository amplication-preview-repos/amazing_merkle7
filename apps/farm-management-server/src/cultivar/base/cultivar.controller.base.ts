/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CultivarService } from "../cultivar.service";
import { CultivarCreateInput } from "./CultivarCreateInput";
import { Cultivar } from "./Cultivar";
import { CultivarFindManyArgs } from "./CultivarFindManyArgs";
import { CultivarWhereUniqueInput } from "./CultivarWhereUniqueInput";
import { CultivarUpdateInput } from "./CultivarUpdateInput";

export class CultivarControllerBase {
  constructor(protected readonly service: CultivarService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cultivar })
  async createCultivar(
    @common.Body() data: CultivarCreateInput
  ): Promise<Cultivar> {
    return await this.service.createCultivar({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cultivar] })
  @ApiNestedQuery(CultivarFindManyArgs)
  async cultivars(@common.Req() request: Request): Promise<Cultivar[]> {
    const args = plainToClass(CultivarFindManyArgs, request.query);
    return this.service.cultivars({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cultivar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cultivar(
    @common.Param() params: CultivarWhereUniqueInput
  ): Promise<Cultivar | null> {
    const result = await this.service.cultivar({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cultivar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCultivar(
    @common.Param() params: CultivarWhereUniqueInput,
    @common.Body() data: CultivarUpdateInput
  ): Promise<Cultivar | null> {
    try {
      return await this.service.updateCultivar({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cultivar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCultivar(
    @common.Param() params: CultivarWhereUniqueInput
  ): Promise<Cultivar | null> {
    try {
      return await this.service.deleteCultivar({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
