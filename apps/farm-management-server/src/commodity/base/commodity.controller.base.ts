/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommodityService } from "../commodity.service";
import { CommodityCreateInput } from "./CommodityCreateInput";
import { Commodity } from "./Commodity";
import { CommodityFindManyArgs } from "./CommodityFindManyArgs";
import { CommodityWhereUniqueInput } from "./CommodityWhereUniqueInput";
import { CommodityUpdateInput } from "./CommodityUpdateInput";

export class CommodityControllerBase {
  constructor(protected readonly service: CommodityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Commodity })
  async createCommodity(
    @common.Body() data: CommodityCreateInput
  ): Promise<Commodity> {
    return await this.service.createCommodity({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Commodity] })
  @ApiNestedQuery(CommodityFindManyArgs)
  async commodities(@common.Req() request: Request): Promise<Commodity[]> {
    const args = plainToClass(CommodityFindManyArgs, request.query);
    return this.service.commodities({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Commodity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commodity(
    @common.Param() params: CommodityWhereUniqueInput
  ): Promise<Commodity | null> {
    const result = await this.service.commodity({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Commodity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommodity(
    @common.Param() params: CommodityWhereUniqueInput,
    @common.Body() data: CommodityUpdateInput
  ): Promise<Commodity | null> {
    try {
      return await this.service.updateCommodity({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Commodity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommodity(
    @common.Param() params: CommodityWhereUniqueInput
  ): Promise<Commodity | null> {
    try {
      return await this.service.deleteCommodity({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
