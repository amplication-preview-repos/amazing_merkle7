/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Commodity as PrismaCommodity } from "@prisma/client";

export class CommodityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommodityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commodity.count(args);
  }

  async commodities(
    args: Prisma.CommodityFindManyArgs
  ): Promise<PrismaCommodity[]> {
    return this.prisma.commodity.findMany(args);
  }
  async commodity(
    args: Prisma.CommodityFindUniqueArgs
  ): Promise<PrismaCommodity | null> {
    return this.prisma.commodity.findUnique(args);
  }
  async createCommodity(
    args: Prisma.CommodityCreateArgs
  ): Promise<PrismaCommodity> {
    return this.prisma.commodity.create(args);
  }
  async updateCommodity(
    args: Prisma.CommodityUpdateArgs
  ): Promise<PrismaCommodity> {
    return this.prisma.commodity.update(args);
  }
  async deleteCommodity(
    args: Prisma.CommodityDeleteArgs
  ): Promise<PrismaCommodity> {
    return this.prisma.commodity.delete(args);
  }
}
