/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DeliveryRun as PrismaDeliveryRun } from "@prisma/client";

export class DeliveryRunServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryRunCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryRun.count(args);
  }

  async deliveryRuns(
    args: Prisma.DeliveryRunFindManyArgs
  ): Promise<PrismaDeliveryRun[]> {
    return this.prisma.deliveryRun.findMany(args);
  }
  async deliveryRun(
    args: Prisma.DeliveryRunFindUniqueArgs
  ): Promise<PrismaDeliveryRun | null> {
    return this.prisma.deliveryRun.findUnique(args);
  }
  async createDeliveryRun(
    args: Prisma.DeliveryRunCreateArgs
  ): Promise<PrismaDeliveryRun> {
    return this.prisma.deliveryRun.create(args);
  }
  async updateDeliveryRun(
    args: Prisma.DeliveryRunUpdateArgs
  ): Promise<PrismaDeliveryRun> {
    return this.prisma.deliveryRun.update(args);
  }
  async deleteDeliveryRun(
    args: Prisma.DeliveryRunDeleteArgs
  ): Promise<PrismaDeliveryRun> {
    return this.prisma.deliveryRun.delete(args);
  }
}
