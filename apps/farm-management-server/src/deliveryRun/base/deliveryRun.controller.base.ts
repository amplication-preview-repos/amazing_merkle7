/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryRunService } from "../deliveryRun.service";
import { DeliveryRunCreateInput } from "./DeliveryRunCreateInput";
import { DeliveryRun } from "./DeliveryRun";
import { DeliveryRunFindManyArgs } from "./DeliveryRunFindManyArgs";
import { DeliveryRunWhereUniqueInput } from "./DeliveryRunWhereUniqueInput";
import { DeliveryRunUpdateInput } from "./DeliveryRunUpdateInput";

export class DeliveryRunControllerBase {
  constructor(protected readonly service: DeliveryRunService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryRun })
  async createDeliveryRun(
    @common.Body() data: DeliveryRunCreateInput
  ): Promise<DeliveryRun> {
    return await this.service.createDeliveryRun({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryRun] })
  @ApiNestedQuery(DeliveryRunFindManyArgs)
  async deliveryRuns(@common.Req() request: Request): Promise<DeliveryRun[]> {
    const args = plainToClass(DeliveryRunFindManyArgs, request.query);
    return this.service.deliveryRuns({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryRun })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryRun(
    @common.Param() params: DeliveryRunWhereUniqueInput
  ): Promise<DeliveryRun | null> {
    const result = await this.service.deliveryRun({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryRun })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryRun(
    @common.Param() params: DeliveryRunWhereUniqueInput,
    @common.Body() data: DeliveryRunUpdateInput
  ): Promise<DeliveryRun | null> {
    try {
      return await this.service.updateDeliveryRun({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryRun })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryRun(
    @common.Param() params: DeliveryRunWhereUniqueInput
  ): Promise<DeliveryRun | null> {
    try {
      return await this.service.deleteDeliveryRun({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
