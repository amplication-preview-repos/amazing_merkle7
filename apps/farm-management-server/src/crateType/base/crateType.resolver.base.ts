/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CrateType } from "./CrateType";
import { CrateTypeCountArgs } from "./CrateTypeCountArgs";
import { CrateTypeFindManyArgs } from "./CrateTypeFindManyArgs";
import { CrateTypeFindUniqueArgs } from "./CrateTypeFindUniqueArgs";
import { DeleteCrateTypeArgs } from "./DeleteCrateTypeArgs";
import { CrateTypeService } from "../crateType.service";
@graphql.Resolver(() => CrateType)
export class CrateTypeResolverBase {
  constructor(protected readonly service: CrateTypeService) {}

  async _crateTypesMeta(
    @graphql.Args() args: CrateTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CrateType])
  async crateTypes(
    @graphql.Args() args: CrateTypeFindManyArgs
  ): Promise<CrateType[]> {
    return this.service.crateTypes(args);
  }

  @graphql.Query(() => CrateType, { nullable: true })
  async crateType(
    @graphql.Args() args: CrateTypeFindUniqueArgs
  ): Promise<CrateType | null> {
    const result = await this.service.crateType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CrateType)
  async deleteCrateType(
    @graphql.Args() args: DeleteCrateTypeArgs
  ): Promise<CrateType | null> {
    try {
      return await this.service.deleteCrateType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
