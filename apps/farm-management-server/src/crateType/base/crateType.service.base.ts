/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CrateType as PrismaCrateType } from "@prisma/client";

export class CrateTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrateTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crateType.count(args);
  }

  async crateTypes(
    args: Prisma.CrateTypeFindManyArgs
  ): Promise<PrismaCrateType[]> {
    return this.prisma.crateType.findMany(args);
  }
  async crateType(
    args: Prisma.CrateTypeFindUniqueArgs
  ): Promise<PrismaCrateType | null> {
    return this.prisma.crateType.findUnique(args);
  }
  async createCrateType(
    args: Prisma.CrateTypeCreateArgs
  ): Promise<PrismaCrateType> {
    return this.prisma.crateType.create(args);
  }
  async updateCrateType(
    args: Prisma.CrateTypeUpdateArgs
  ): Promise<PrismaCrateType> {
    return this.prisma.crateType.update(args);
  }
  async deleteCrateType(
    args: Prisma.CrateTypeDeleteArgs
  ): Promise<PrismaCrateType> {
    return this.prisma.crateType.delete(args);
  }
}
